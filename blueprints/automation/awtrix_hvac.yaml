---
blueprint:
  name: AWTRIX HVAC 🥵 🌡️ 🥶
  description: >
    Monitor the status of your HVAC system with Awtrix


    This automation requires two icons to exist (you can select the name below).


    If you want to use the icons I developed run:
      
      ![](https://developer.lametric.com/content/apps/icon_thumbs/53270_icon_thumb.gif?v=2)![](https://developer.lametric.com/content/apps/icon_thumbs/53271_icon_thumb.gif?v=2)

        bash -c "$(curl -fsSL https://raw.githubusercontent.com/jeeftor/HomeAssistant/master/icons/upload_icon.sh)"

    And select the IP_ADDRESS of your awtrix device and `hvac` as the icon set to upload

  domain: automation
  input:
    awtrix:
      name: AWTRIX Device
      description: Select the Awtrix light
      selector:
        device:
          integration: mqtt
          manufacturer: Blueforcer
          model: AWTRIX 3
          multiple: true
    hvac:
      name: Climate Device / HVAC
      description: HVAC Device (Ecobee, Nest etc)
      selector:
        entity:
          domain: climate
    heat_icon:
      name: Heating icon name
      selector:
        text:
      default: heat
    cool_icon:
      name: Cooling icon name
      selector:
        text:
      default: cool
    app_name:
      name: Awtrix Applicaiton name
      description: This is the app name listed in the MQTT topic - it should be unique
      selector:
        text:
      default: jeef_hvac

mode: restart
variables:
  device_ids: !input awtrix
  app_name: !input app_name
  devices_topics: >-
    {%- macro get_device_topic(device_id) %}
    {{- states((device_entities(device_id) | select('search','device_topic') | list)[0]) }}
    {%- endmacro %}

    {%- set ns = namespace(devices=[]) %}
    {%- for device_id in device_ids %}
      {%- set device=get_device_topic(device_id)|replace(' ','') %}
      {% set ns.devices = ns.devices + [ device ~ '/custom/' ~ app_name] %}
    {%- endfor %}
    {{ ns.devices | reject('match','unavailable') | list}}

  climate: !input hvac
  mode: "{{states(climate)}}"
  target_temp: "{{ iif(state_attr(climate, 'temperature'),state_attr(climate, 'temperature'),0,state_attr(climate, 'current_temperature')) | round(0)}}"
  temp_current: "{{state_attr(climate, 'current_temperature')}}"
  temp_current_ceil: "{{ temp_current | round(0,'ceil') }}"
  temp_current_floor: "{{ temp_current | round(0,'floor') }}"

  is_running: "{{ not state_attr(climate, 'temperature') is none }}"

  payload: >-
    {%- if not is_running %}
    {}
    {%- elif mode == 'heat' %}
    { "icon": "heat",
      "text": [
        {"t":"{{temp_current_floor}}", "c":"#ffffff"},
        {"t":">","c":"#9c9d97"},
        {"t":"{{target_temp}}", "c":"#ffffff"}
      ] }
    {% elif mode == 'cool' %}
    { "icon": "cool",
      "text": [
        {"t":"{{temp_current_ceil}}", "c":"#ffffff"},
        {"t":">","c":"#9c9d97"},
        {"t":"{{target_temp}}", "c":"#ffffff"}
      ] }
    {% endif %}

trigger:
  - platform: time_pattern
    seconds: /5

condition: []
action:
  - repeat:
      for_each: "{{ devices_topics }}"
      sequence:
        - service: mqtt.publish
          data:
            qos: 0
            retain: false
            topic: "{{ repeat.item }}"
            payload: >
              {{payload}}
